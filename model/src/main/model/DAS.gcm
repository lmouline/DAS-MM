index Knowledges: Knowledge using name
index Strategies: Strategy using name
index Natures: Nature using name
index Requirements: Requirement using name
index Contexts: Context using name

const TYPE_NUMERICAL: String = "Type::Numerical"
const TYPE_BOOLEAN: String = "Type::Boolean"
const TYPE_TEXT: String = "Type::Text"
const TYPE_BYTE: String = "Type::Byte"

class Knowledge {
    att name: String

    ref context: Context
    rel strategies: Strategy
    rel requirements: Requirement
    rel decisions: Decision
}

class Decision {
    rel execute: Tactic oppositeOf isExecutedBy
    rel goals: Goal
    rel input: Value oppositeOf inputOf
    rel impact: Value oppositeOf impactedBy
}

// Context mm
class Context {
    att name: String

    rel globals: Attribute
    rel structures: Structure
}

class Information{
    att name: String
}

class  Structure extends Information {
    rel inner: Structure
    rel properties: Property
    rel values: StructureValue oppositeOf structure

    rel parent: Structure
}

class Value {
    rel inputOf: Decision oppositeOf input
    rel impactedBy: Decision oppositeOf impact

    rel valueOf: Property oppositeOf values
    rel expectedOf: Property oppositeOf expected

    rel uncertainty: Uncertainty

    rel impactedByExec: Execution oppositeOf impactedValues
    rel usedByExec: Execution oppositeOf usedBy
}

class StructureValue extends Value {
    ref structure: Structure oppositeOf values
    rel values: PropValue
}

class Property extends Information {
    att name: String
    att isTemporal: Boolean
    att isStatic: Boolean

    rel values: PropValue oppositeOf valueOf

    rel consistentWith: Property oppositeOf isConsistentWith
    rel isConsistentWith: Property oppositeOf consistentWith

    rel computedUsing: Property oppositeOf computationInput
    rel computationInput: Property oppositeOf computedUsing

    rel influence: Property oppositeOf isInfluencedBy
    rel isInfluencedBy: Property oppositeOf influence

    rel source: Source
    rel uncertainty: Uncertainty
}

class PropValue extends Value {
    rel prop: Property oppositeOf values
}

class Attribute extends Property{
    att typeAtt: String
    att isArray: Boolean
}

class Relation extends Property {
    ref opposite: Relation
    ref typeRel: Structure
}


class Source {}
class Sensor extends Source {}
class User extends Source {}
class Computation extends Source {
    att expression: String
}

class Uncertainty {
    att value: Double
}

// Action mm
class Strategy {
    att name: String

    rel tactics: Tactic oppositeOf strategy
}

class Tactic {
    att name: String

    ref strategy: Strategy oppositeOf tactics
    ref query: TemporalQuery
    rel actions: Action oppositeOf tactic

    rel isExecutedBy: Decision oppositeOf execute

    ref tacticExec: TacticExecution oppositeOf tactic
}

class TemporalQuery {
    rel implement: Goal oppositeOf isImplementedBy
    rel input: Information
}

class Action {
    att name: String

    rel impact: Information
    ref tactic: Tactic oppositeOf actions

    ref executions: ActionExecution oppositeOf action
}

class Execution {
  att status: String
  att start: Long
  att stop: Long

  rel usedValues: Value oppositeOf usedByExec
  rel impactedValues: Value oppositeOf impactedByExec
}

class ActionExecution extends Execution {}
class TacticExecution extends Execution {
    rel actionsExec: ActionExecution

    ref tactic: Tactic oppositeOf tacticExec
}


// Requirement mm
class Requirement {
    att name: String

    rel goals: Goal oppositeOf requirement
}

class Nature {
    att name: String
}

class Goal {
    att goal: String
    rel isImplementedBy: TemporalQuery oppositeOf implement
    ref requirement: Requirement oppositeOf goals

    ref nature: Nature
}



class Constraint extends Nature {
    ref appliesTo: ConstrainedNature
}

class ConstrainedNature extends Nature {}
class Functional extends ConstrainedNature {}
class Performance extends ConstrainedNature {}
class Quality extends ConstrainedNature {}